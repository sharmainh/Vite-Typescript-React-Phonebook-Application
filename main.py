#See the package.json file (line 9 ) That line of code was written after this main.py file was created. This will allow you to type the following command in the terminal: 'npm run python-run-script' which will print the word success (see below) side Note: instead of the words 'python-run-script' from the package.json file (line 9) you could have written ANYTHING as long as you change the command you type in the terminal to match. THIS IS BECAUSE all of the code in package.json file are just scripts/commands to run other things. In the dependencies section of package.json file, react, and react-dom are things weve installed. If your using typeScript and you have import errors its usually beacuse you should have an '@types' version of something you imported see (line 19) of package.json. Dependencies get sent to the cloud when you upload it to the internet. Dev Dependencies are things you use while your building the application, its not going to be needed to run when you put it on the internet. see (line 5) You can add other things to package.json file, The information (author etc. for example) will be visible somewhere when you upload this to the internet. 
# The file tsconfig.json is a bunch of rules for how typescript is going to run. we do want to MAKE SURE jsx is in there (line 15) because when we run the app its going to take the typescript, its going to compile it (take from one language to another one), its going to break down javascript into typescript because browsers ONLY RUN ON JavaScript. its going to take the typescript, turn it into javascript, and then it will run in the browser tsconfig file is part of the rules for that. It needs to know what version of typecript were using, which version were going to change it into, and in this case it needs to know were going to be writing jsx because jsx is way different than regular javascript. tsconfig file (line 7 ) 'allow JS: false' will prevent us from using regular javascript inside this application, were trying to filter/make sure no one is trying to write "crummy code/loosy goosy javascript" in our typescript application which will cause errors. 

#TAILWIND INFO
# Next Download tailwind, You cannot use tailwind or bootstrap in a browser, it has to me converted to HTML, JavaScript, or CSS those are three things it has to be broken down to. With tailwind you can do something called building before you put it on the internet. You run a command and it will build all of the application, and it will take all of your typescript, tailwind etc. and it will break it down into code that runs on the browser. Thats what we put on the internet the broken down compiled folder. Thats part of what post CSS is, tailwind and post CSS are very closely related. YOU NEED TO MAKE SURE THAT ANY TYPES OF FILES THAT YOUR USING , we tell tailwind where to look, OTHERWISE tailwind will try to run on our whole computer
print("success")

# The new version of react-router- dom will NOT work with the older versions of react. React 17 and React 18 are different, there were changes made the dependencies changed. Theres a new version of router-dom, router-dom 6. IF YOYR WORKING WITH REACT 17 you have to use react router dom 5. if you import the wrong version you will have problems: to download React version 18 router dom type in terminal 'npm i react-router-dom'. check package.json file (line 17) to see what code looks like when installed